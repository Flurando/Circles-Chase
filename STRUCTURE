This file shows how the project is structured now, with aspects of:
1. what is each file / directory for?
2. where are the cross-file variable usages or procedure calls?

[main.w]: The main entry for running the game. Intended to be run using "chickadee play main.w --language=wisp" with additionally "--repl" or "--repl-server" if you want to change something on the fly or test new features

[setup.scm]: where the use-modules call goes, or anything that is needed before any other code is evaluated

[utils.scm]: some helper precedure or variables. They are needed somewhere but not related tightly to game logic like drawing, calculating vectors or collisions.

[agendas.scm]: where all important agendas are defined and maybe attached to simple every or call-when bindings. By "important", I mean those that are not challenge or scene specific, like the agenda of the whole playing time.

[player.scm]: variables and methods of the player goes here. But there should not have any run-when-loaded stuff like scripts or agendas exposed

[enemy.scm]: similar to player.scm but the real variables and methods may differ from that of the player

[score.scm]: code about the score in game. Like the score variable and a relative agenda. To note that, there might be a run-when-loaded script or agenda here for any file with an agenda in, if they need to update their agendas without complex logic like picking up weapons or killing an enemy (which means, now, just update to the main globle agenda instead of anything else)

[healthbar.scm]: where I implemented a small healthbar showing visually the player-health variable under the player.scm

[sceneswitcher.scm]: a system of managing scenes. Actually it is just a list and two procedures that can iterately call the procedures wrapped up in the list

[loader.scm]: scan directory and load everything in it at execution time. Used for loading challenges and scenes.

[TODO.org]: a todo list listing out the functionality I am working on or trying to implement (fine, I know these are simple for old folks)

[README]: introduction to this toy learning project

[STRUCTURE]: You should know what this is for already!

[challenges/]: a directory to store challenges, which are game machenics instead of those put in draw or update procedures

[scenes-wisp/]: store the scenes written in wisp. A scene should look like '(name-symbol . (draw-procedure . update-procedure)) where draw-procedure has the responsibility to call anything needed (specifically, drawing) and it would call by the scene-draw! procedure under the default draw -- update-procedure is similar

[scenes/]: the actual loaded scenes. All the .scm files here are (supposedly) generated by those in the scenes-wisp directory but handwritting original scheme is also accepted

The cross calling of scenes or challenges are commented per usage in place, while there indeed exist some nasty but "I don't know how to arrange them better" procedure calls that may be confusing (I myself is already feeling dizzy!), so I am going to list them below using <name> FROM <original-file-name> USED IN <destination-file-names> style.

key->1 FROM utils.scm

void FROM utils.scm

score-timer FROM agendas.scm USED IN score.scm

play-timer FROM agendas.scm USED IN score.scm

position FROM player.scm USED IN enemy.scm

player-health FROM player.scm

player-move! FROM player.scm

player-draw FROM player.scm

enemy-spawn! FROM enemy.scm

enemy-auto-move FROM enemy.scm

enemy-auto-draw FROM enemy.scm

score-to-show FROM score.scm

score-gain! FROM score.scm

score-lose! FROM score.scm

healthbar-draw FROM healthbar.scm

scene-register! FROM sceneswitcher.scm

scene-delete! FROM sceneswitcher.scm

scene-draw! FROM sceneswitcher.scm

scene-update! FROM sceneswitcher.scm